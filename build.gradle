plugins {
	id 'java'
	id 'checkstyle'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.shop'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	 implementation 'org.springframework.boot:spring-boot-starter-data-jpa' //uncomment when configuring db
	// implementation 'org.springframework.boot:spring-boot-starter-oauth2-client' // uncomment when configuring jwt token
	// implementation 'org.springframework.boot:spring-boot-starter-security'// uncomment when configuring jwt token
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	implementation 'org.flywaydb:flyway-database-postgresql'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.assertj:assertj-core:4.0.0-M1'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.8'
}

tasks.named('test') {
	useJUnitPlatform()

	testLogging {
		events "passed", "skipped", "failed"
		exceptionFormat "full"
		showStandardStreams = true
	}
}

checkstyle {
	toolVersion = '10.23.1'
	configFile = file("checkstyle.xml")
	configProperties = [
			"checkstyle.cache.file": "${buildDir}/checkstyle-cache"
	]
}

tasks.withType(Checkstyle).configureEach {
	reports {
		xml.required.set(false)
		html.required.set(true)
		html.outputLocation.set(file("$buildDir/reports/checkstyle.html"))
	}
	ignoreFailures = false
	maxWarnings = 0
}